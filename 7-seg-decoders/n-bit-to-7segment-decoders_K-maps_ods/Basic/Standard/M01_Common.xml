<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="M01_Common" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Type TTest_NoTyname
End Type

Type TTest_Tyname
	tyname As String
End Type


Sub Main
	test_Common()
End Sub

Function typeOf(x As Variant)
	Dim result As String
	result = TypeName(x)
	If result = &quot;Object&quot; Then
		result = _typeOf(x) &apos; DONT access fields in here!
	ElseIf IsArray(x) Then
		result = &quot;Array&quot;
	End If
	typeOf = result
End Function

Function _typeOf(o As Object)
	Dim result As String
	result = &quot;Object&quot;
	On Local Error Goto ErrorHandler
	result = result &amp; &quot;/&quot; &amp; _tyname(o)
ErrorHandler:
	_typeOf = result
End Function

Function isString(x As Variant)
	isString = (typeOf(x) = typeOf(&quot;&quot;))
End Function

Function _tyname(o As Object)
	_tyname = o.tyname
End Function

Sub croak(msg As String)
	Dim provoke As Object
	If (testLevel = 0) Then
		MsgBox(msg)
	End If
	MsgBox(provoke.AnError)
End Sub

Function id(x As Variant)
	id = x
End Function
&apos; K I = \b x.b) (\y.y) = \x.\y.y = \x y.y

Function fstArg(x As Variant, y As Variant)
	fstArg = x
End Function

Function sndArg(x As Variant, y As Variant)
	sndArg = y
End Function

Function swap(fn As Variant, x As Variant, y As Variant)
	swap = apply(fn, y, x)
End Function

Function concat(a As String, b As String) As String
	concat = a &amp; b
End Function

Function add(a As Long, b As Long) As Long
	add = a + b
End Function

Function mul(a As Long, b As Long) As Long
	mul = a * b
End Function

Function startsWith(s As String, prefix As String) 
	startsWith = ((Len(prefix) &lt;= Len(s)) And (Mid(s, 1, Len(prefix)) = prefix))
End Function

Function equ(a As Variant, b As Variant) As Boolean
	Dim ta As String, tb As String, tmp As String
	Dim result as Boolean
	ta = typeOf(a)
	tb = typeOf(b)
	If Not(ta = tb) Then
		If (isNull(a) And startsWith(tb, ta)) Or (isNull(b) And startsWith(ta, tb)) Then
			result = False
		Else
			croak(&quot;equ: incompatible types &quot; &amp; ta &amp; &quot; and &quot; &amp; tb)
		End If
	Else &apos; ta = tb
		Select Case ta
			Case &quot;Object&quot;	&apos; Object without a .tyname field
				result = (isNull(a) And isNull(b))
				If Not(result) Then
					croak(&quot;equ: cannot compare values of underspecified type &quot; &amp; ta)
				End If
			Case &quot;Object/&quot;	&apos; Object with a uninitialized .tyname field
				croak(&quot;equ: cannot compare (uninitialized) values of type &quot; &amp; ta)
			Case &quot;Empty&quot;:	result = True
			&apos;Case &quot;&quot;: result = 
			Case Else
				If isObject(a) Then	&apos;they are instances of the same custom type (with non-empty.tyname)
					&apos; ATTENTION: do NOT access .tyname directly!
					Dim fName As String
					fName = _tyname(a) &amp; &quot;_equ&quot;
					result = apply(fName, a, b)
				ElseIf isArray(a) Then
					croak(&quot;equ: NYI - comparing arrays&quot;)
				Else
					result = (a = b)
				End If
		End Select
	End If
	equ = result
End Function

Function toString(ByVal v As Variant) As String
	Dim result As String
	Dim tp As String
	tp = typeOf(v)
	Select Case tp
		Case &quot;String&quot;
			Dim t As String
			t = v &amp; &quot;&quot;
			t = Join(Split(t, chr(13)), &quot;\n&quot;)
			t = Join(Split(t, chr(9)), &quot;\t&quot;)
			result = &quot;&apos;&quot; &amp; t &amp; &quot;&apos;&quot;
		Case &quot;Empty&quot;
			result = tp
		Case &quot;Array&quot;
			result = Array_toString(v)
		Case &quot;Object&quot;	&apos; Object without a .tyname field
			If IsNull(v) Then
				result = &quot;Nothing&quot;
			Else
				result = tp &amp; &quot;(...)&quot;
			End If
		Case Else
			If IsObject(v) Then	&apos; Object with a .tyname field
				Dim tyName As String, toStrFnName As String
				&apos; ATTENTION: do NOT access .tyname directly!
				tyName = _tyName(v)
				If (tyname = &quot;&quot;) Then
					result = &quot;Object(tyname=&apos;&apos;)&quot;
				Else
					toStrFnName = tyName &amp; &quot;_toString&quot;
					&apos;We&apos;ve got an Object with .tyName, so we insist on its _toString to exist
					&apos;Note: We test for existence separately because apply/croak call toString again...
					If Not(existsF(toStrFnName)) Then
						croak(&quot;toString: unknown fn &apos;&quot; &amp; toStrFnName &amp; &quot;&apos;&quot;)
					Else
						result = apply(toStrFnName, v)
					End If
				End If
			Else
				result = v &amp; &quot;&quot;
			End If
	End Select
	toString = result
End Function

Function readHex(arg As Variant) As Long
	Dim result As Long, t As String
	t = typeOf(arg)
	Select Case t
		Case &quot;Array&quot;
			result = readHex(Join(arg))
		Case &quot;String&quot;
			Dim l As Integer
			l = Len(arg)
			If l = 0 Then
				croak(&quot;readHex: got empty String&quot;)
			Else
				Dim digits As String, d As Integer, x As Long, i As Integer
				digits = arg
				result = 0
				For i = 1 To Len(digits)
					d = Asc(Mid(digits, i, 1))
					If (d &gt;= Asc(&quot;0&quot;)) And (d &lt;= Asc(&quot;9&quot;)) Then
						x = d - Asc(&quot;0&quot;)
					ElseIf (d &gt;= Asc(&quot;A&quot;)) And (d &lt;= Asc(&quot;F&quot;)) Then
						x = d - Asc(&quot;A&quot;) + 10
					ElseIf (d &gt;= Asc(&quot;a&quot;)) And (d &lt;= Asc(&quot;f&quot;)) Then
						x = d - Asc(&quot;a&quot;) + 10
					Else
						croak(&quot;readHex: invalid hex digit &apos;&quot; &amp; chr(d) &amp; &quot;&apos; in &quot; &amp; toString(arg))
					End If
&apos;On Local Error Goto readHex_blows		
					result = (result * 16) + x
				Next i
			End If
		Case Else
			croak(&quot;readHex: expected Array or String - got &quot; &amp; t &amp; &quot;:&quot; &amp; chr(13) &amp; toString(arg))
	End Select
	readHex = result
	Exit Function
	
readHex_blows:
	MsgBox(toString(result))
	Exit Function
End Function

&apos;= tests ============================================================

Function test_Common()
	test_concat()
	test_typeOf()
	test_isString()
	test_toString()
	test_id()
	test_fstArg()
	test_sndArg()
	test_add()
	test_mul()
	test_equ()
	test_readHex()
End Function

Function test_concat()
	assertEqual(concat(&quot;&quot;, &quot;&quot;), &quot;&quot;).x
	assertEqual(concat(&quot;a&quot;, &quot;&quot;), &quot;a&quot;).x
	assertEqual(concat(&quot;a&quot;, &quot;b&quot;), &quot;ab&quot;).x
	assertEqual(concat(&quot;a&quot;, &quot;bc&quot;), &quot;abc&quot;).x
	assertEqual(concat(&quot;ab&quot;, &quot;c&quot;), &quot;abc&quot;).x
	
	assertEqual(arityF(&quot;concat&quot;), 2).x
	assertEqual(apply(&quot;concat&quot;, &quot;&quot;, &quot;&quot;), &quot;&quot;).x
	assertEqual(apply(&quot;concat&quot;, &quot;a&quot;, &quot;&quot;), &quot;a&quot;).x
	assertEqual(apply(&quot;concat&quot;, &quot;a&quot;, &quot;b&quot;), &quot;ab&quot;).x
	assertEqual(apply(&quot;concat&quot;, &quot;a&quot;, &quot;bc&quot;), &quot;abc&quot;).x
	assertEqual(apply(&quot;concat&quot;, &quot;ab&quot;, &quot;c&quot;), &quot;abc&quot;).x
End Function

Function test_typeOf()
	assertEqual(typeOf(0), &quot;Integer&quot;).x
	assertEqual(typeOf(1), &quot;Integer&quot;).x
	assertEqual(typeOf(-42), &quot;Integer&quot;).x
	
	assertEqual(typeOf(&quot;&quot;), &quot;String&quot;).x
	assertEqual(typeOf(&quot;1&quot;), &quot;String&quot;).x
	
	assertEqual(typeOf(3.14), &quot;Double&quot;).x

	assertEqual(typeOf(Array()), &quot;Array&quot;).x

	assertEqual(typeOf(Empty), &quot;Empty&quot;).x
	assertEqual(typeOf(Nothing), &quot;Object&quot;).x

	Dim t1 As New TTest_NoTyName
	assertEqual(typeOf(t1), &quot;Object&quot;).x

	Dim t2 As New TTest_TyName
	t2.tyname = &quot;foobar&quot;
	assertEqual(typeOf(t2), &quot;Object/foobar&quot;).x
End Function

Function test_isString()
	assertEqual(isString(&quot;&quot;),                  True).x
	assertEqual(isString(&quot;a&quot;),                 True).x
	assertEqual(isString(&quot;foobar&quot;),            True).x
	assertEqual(isString(Nothing),            False).x
	assertEqual(isString(Empty),              False).x
	assertEqual(isString(True),               False).x
	assertEqual(isString(False),              False).x
	assertEqual(isString(0),                  False).x
	assertEqual(isString(1),                  False).x
	assertEqual(isString(3.14),               False).x
	assertEqual(isString(Array()),            False).x
	assertEqual(isString(Array(42)),          False).x
	assertEqual(isString(Array(42)),          False).x
	assertEqual(isString(&quot;0&quot;),                 True).x
	assertEqual(isString(&quot;1&quot;),                 True).x
	assertEqual(isString(&quot;3.14&quot;),              True).x
	
	assertEqual(arityF(&quot;isString&quot;),				  1).x
	assertEqual(apply(&quot;isString&quot;, &quot;&quot;),         True).x
	assertEqual(apply(&quot;isString&quot;, &quot;a&quot;),        True).x
	assertEqual(apply(&quot;isString&quot;, &quot;foobar&quot;),   True).x
	assertEqual(apply(&quot;isString&quot;, Nothing),   False).x
	assertEqual(apply(&quot;isString&quot;, Empty),     False).x
	assertEqual(apply(&quot;isString&quot;, True),      False).x
	assertEqual(apply(&quot;isString&quot;, False),     False).x
	assertEqual(apply(&quot;isString&quot;, 0),         False).x
	assertEqual(apply(&quot;isString&quot;, 1),         False).x
	assertEqual(apply(&quot;isString&quot;, 3.14),      False).x
	assertEqual(apply(&quot;isString&quot;, Array()),   False).x
	assertEqual(apply(&quot;isString&quot;, Array(42)), False).x
	assertEqual(apply(&quot;isString&quot;, Array(42)), False).x
	assertEqual(apply(&quot;isString&quot;, &quot;0&quot;),        True).x
	assertEqual(apply(&quot;isString&quot;, &quot;1&quot;),        True).x
	assertEqual(apply(&quot;isString&quot;, &quot;3.14&quot;),     True).x
End Function

Function test_toString()
	assertEqual(toString(&quot;&quot;),                  &quot;&apos;&apos;&quot;).x
	assertEqual(toString(&quot; &quot;),                 &quot;&apos; &apos;&quot;).x
	assertEqual(toString(&quot;abc&quot;),               &quot;&apos;abc&apos;&quot;).x
	assertEqual(toString(0),                   &quot;0&quot;).x
	assertEqual(toString(&quot;0&quot;),                 &quot;&apos;0&apos;&quot;).x
	assertEqual(toString(1),                   &quot;1&quot;).x
	assertEqual(toString(&quot;1&quot;),                 &quot;&apos;1&apos;&quot;).x
	assertEqual(toString(&quot; 1&quot;),                &quot;&apos; 1&apos;&quot;).x
	assertEqual(toString(&quot;01&quot;),                &quot;&apos;01&apos;&quot;).x
	assertEqual(toString(01),                  &quot;1&quot;).x
	assertEqual(toString(chr(13)),             &quot;&apos;\n&apos;&quot;).x
	assertEqual(toString(chr( 9)),             &quot;&apos;\t&apos;&quot;).x
	assertEqual(toString(chr( 9) &amp; &quot;x&quot;),       &quot;&apos;\tx&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr( 9)),       &quot;&apos;x\t&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr(13)),       &quot;&apos;x\n&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr( 9) &amp; &quot;y&quot;), &quot;&apos;x\ty&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr(13) &amp; &quot;y&quot;), &quot;&apos;x\ny&apos;&quot;).x
	assertEqual(toString(chr(9) &amp; chr(13) &amp; &quot;y&quot;), &quot;&apos;\t\ny&apos;&quot;).x

	Dim aLong As Long
	aLong = 0
	assertEqual(toString(aLong), 	 &quot;0&quot;).x
	assertEqual(toString(aLong + 1), &quot;1&quot;).x

	assertEqual(toString(Nothing), &quot;Nothing&quot;).x
	assertEqual(toString(Empty), &quot;Empty&quot;).x

	Dim t1 As New TTest_NoTyName
	assertEqual(toString(t1), &quot;Object(...)&quot;).x

	Dim t2 As New TTest_TyName
	assertEqual(toString(t2), &quot;Object(tyname=&apos;&apos;)&quot;).x
	t2.tyname = &quot;foobar&quot;
	assertThrows(&quot;toString&quot;, Array(t2)).x
End Function

Function test_id()
	assertEqual(arityF(&quot;id&quot;), 1).x

	assertEqual(id(Empty), Empty).x
	assertEqual(id(Nothing), Nothing).x
	
	assertEqual(id(0), 0).x
	assertEqual(id(1), 1).x
	assertEqual(id(-2), -2).x
	assertEqual(id(&quot;a&quot;), &quot;a&quot;).x
	assertEqual(id(&quot;b&quot;), &quot;b&quot;).x
End Function

Function test_fstArg()
	assertEqual(arityF(&quot;fstArg&quot;), 2).x

	assertEqual(fstArg(1, 2), 1).x
	assertEqual(fstArg(2, 1), 2).x
	assertEqual(fstArg(&quot;a&quot;, &quot;b&quot;), &quot;a&quot;).x
	assertEqual(fstArg(&quot;b&quot;, &quot;a&quot;), &quot;b&quot;).x
End Function

Function test_sndArg()
	assertEqual(arityF(&quot;sndArg&quot;), 2).x

	assertEqual(sndArg(1, 2), 2).x
	assertEqual(sndArg(2, 1), 1).x
	assertEqual(sndArg(&quot;a&quot;, &quot;b&quot;), &quot;b&quot;).x
	assertEqual(sndArg(&quot;b&quot;, &quot;a&quot;), &quot;a&quot;).x
End Function

Function test_add()
	assertEqual(add( 0,  0),  0).x
	assertEqual(add( 0,  1),  1).x
	assertEqual(add( 1,  1),  2).x
	assertEqual(add( 1,  1),  2).x
	assertEqual(add( 1, -1),  0).x
	assertEqual(add(-1, -1), -2).x
	assertEqual(add( 2,  2),  4).x
	
	assertEqual(add(42, 4711), 		42 + 4711).x
	assertEqual(add(65535, 65535), 	CLng(65535 * 2)).x	&apos; not limited to 16 bit
End Function

Function test_mul()
	assertEqual(mul( 0,  0),  0).x
	assertEqual(mul( 0,  1),  0).x
	assertEqual(mul( 1,  1),  1).x
	assertEqual(mul( 1, -1), -1).x
	assertEqual(mul(-1, -1),  1).x
	assertEqual(mul( 2,  2),  4).x
	
	assertEqual(mul(42, 4711),		CLng(42 * 4711)).x
	assertEqual(mul(65535, 32767),  CLng(65535 * 32767)).x	&apos; not limited to 16 bit
End Function

Function test_equ()
	assertThrows(&quot;equ&quot;, Array(0, &quot;one&quot;)).x
	
	assertEqual(equ(0, 0), True).x
	assertEqual(equ(0, 1), False).x
	assertEqual(equ(1, 0), False).x
	
	assertEqual(equ(&quot;a&quot;, &quot;a&quot;), True).x
	assertEqual(equ(&quot;a&quot;, &quot;b&quot;), False).x
	assertEqual(equ(&quot;b&quot;, &quot;a&quot;), False).x
	assertEqual(equ(&quot;x&quot;, &quot;xx&quot;), False).x
	assertEqual(equ(&quot;xx&quot;, &quot;x&quot;), False).x
	assertEqual(equ(&quot;xx&quot;, &quot;xx&quot;), True).x
	assertEqual(equ(&quot; xx&quot;, &quot;xx&quot;), False).x
	
	assertEqual(equ(Empty, Empty), True).x
	assertEqual(equ(Nothing, Nothing), True).x
	
	Dim vEmpty          As Variant
	assertEqual(typeOf(vEmpty), &quot;Empty&quot;).x
	
	Dim vNothing		As Variant
	vNothing = Nothing
	assertEqual(typeOf(vNothing), &quot;Object&quot;).x
		
	Dim oNothing        As Object
	assertEqual(typeOf(oNothing), &quot;Object&quot;).x
	
	Dim oUninitTyName   As Object
	Set oUninitTyName = New TTest_Tyname
	assertEqual(typeOf(oUninitTyName), &quot;Object/&quot;).x
	
	Dim vUninitTyName As Variant
	vUninitTyName = oUninitTyName
	assertEqual(typeOf(vUninitTyName), &quot;Object/&quot;).x
	
	Dim oInitTyName     As Object
	Set oInitTyName = New TTest_Tyname
	oInitTyName.tyname = &quot;foobar&quot;
	assertEqual(typeOf(oInitTyName), &quot;Object/foobar&quot;).x

	Dim vInitTyName As Variant
	vInitTyName = oInitTyName
	assertEqual(typeOf(vInitTyName), &quot;Object/foobar&quot;).x
	
	Dim oUninitNoTyName As Object
	oUninitNoTyName = New TTest_NoTyname
	assertEqual(typeOf(oUninitNoTyName), &quot;Object&quot;).x

	Dim vUninitNoTyName As Variant
	vUninitNoTyName = oUninitNoTyName
	assertEqual(typeOf(vUninitNoTyName), &quot;Object&quot;).x
	
	&apos;---------------
	
	assertThrows(&quot;equ&quot;, Array(vEmpty, oNothing)).x		&apos; incompatible types Empty and Object

	assertThrows(&quot;equ&quot;, Array(vEmpty, oUninitTyName)).x	&apos; incompatible types Empty and Object/

	assertThrows(&quot;equ&quot;, Array(vUninitTyName, oUninitTyName)).x	&apos; cannot compare uninitialized instances of type Object/

	assertThrows(&quot;equ&quot;, Array(vUninitTyName, oInitTyName)).x	&apos; missing fn &quot;foobar_equ&quot;
	
	assertThrows(&quot;equ&quot;, Array(Array(), Array())).x	&apos; NYI
	
	assertEqual(equ(Nothing,		oNothing), 		True ).x
	assertEqual(equ(oNothing,		Nothing), 		True ).x
	assertEqual(equ(Nothing,		oUninitTyName), False).x
	assertEqual(equ(oUninitTyName,	Nothing),		False).x
	assertEqual(equ(Nothing,		oInitTyName),	False).x
	assertEqual(equ(oInitTyName,	Nothing),		False).x

	assertThrows(&quot;equ&quot;, Array(vEmpty, oUninitNoTyName)).x	&apos; incompatible types Empty and Object
	assertThrows(&quot;equ&quot;, Array(oUninitNoTyName, vEmpty)).x	&apos; incompatible types Object and Empty

	assertThrows(&quot;equ&quot;, Array(vUninitNoTyName, oUninitNoTyName)).x	&apos; cannot compare values of underspecified type Object
	assertThrows(&quot;equ&quot;, Array(oUninitNoTyName, vUninitNoTyName)).x	&apos; cannot compare values of underspecified type Object

	assertThrows(&quot;equ&quot;, Array(nil, oUninitNoTyName)).x	&apos; incompatible types Object/TList and Object
End Function

Function test_readHex()
	assertEqual(arityF(&quot;readHex&quot;), 1).x
	
	assertEqual(readHex( &quot;0&quot;),    0).x
	assertEqual(readHex( &quot;1&quot;),    1).x
	assertEqual(readHex( &quot;2&quot;),    2).x
	assertEqual(readHex( &quot;3&quot;),    3).x
	assertEqual(readHex( &quot;4&quot;),    4).x
	assertEqual(readHex( &quot;5&quot;),    5).x
	assertEqual(readHex( &quot;6&quot;),    6).x
	assertEqual(readHex( &quot;7&quot;),    7).x
	assertEqual(readHex( &quot;8&quot;),    8).x
	assertEqual(readHex( &quot;9&quot;),    9).x
	assertEqual(readHex( &quot;a&quot;),   10).x
	assertEqual(readHex( &quot;A&quot;),   10).x
	assertEqual(readHex( &quot;b&quot;),   11).x
	assertEqual(readHex( &quot;B&quot;),   11).x
	assertEqual(readHex( &quot;c&quot;),   12).x
	assertEqual(readHex( &quot;C&quot;),   12).x
	assertEqual(readHex( &quot;d&quot;),   13).x
	assertEqual(readHex( &quot;D&quot;),   13).x
	assertEqual(readHex( &quot;e&quot;),   14).x
	assertEqual(readHex( &quot;E&quot;),   14).x
	assertEqual(readHex( &quot;f&quot;),   15).x
	assertEqual(readHex( &quot;F&quot;),   15).x

	assertEqual(readHex( &quot;1F&quot;),  31).x
	assertEqual(readHex( &quot;1f&quot;),  31).x
	assertEqual(readHex( &quot;ff&quot;), 255).x
	assertEqual(readHex( &quot;Ff&quot;), 255).x
	
	Dim aLong As Long
	&apos;31 bit
	aLong = 212855723
	assertEqual(typeOf(readHex( &quot;CAFEBAB&quot;)), typeOf(aLong)).x
	assertEqual(readHex( &quot;CAFEBAB&quot;), aLong).x
	aLong = 233495534
	assertEqual(readHex( &quot;deadbee&quot;), aLong).x
	
&apos;	&apos;32 bit
&apos;	assertEqual(readHex( &quot;CAFEBABE&quot;), 3405691582).x
&apos;	assertEqual(readHex( &quot;deadbeef&quot;), 3735928559).x

	assertThrows(&quot;readHex&quot;, Array(3)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot; &quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;g&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;G&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;z&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;Z&quot;)).x

	assertThrows(&quot;readHex&quot;, Array(&quot;014Z&quot;)).x
End Function

</script:module>