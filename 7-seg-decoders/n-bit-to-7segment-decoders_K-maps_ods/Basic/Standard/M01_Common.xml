<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="M01_Common" script:language="StarBasic">REM  *****  BASIC  *****

Type TTest_NoTyname

End Type

Type TTest_Tyname
	tyname As String
End Type


Sub Main
	test_Common()
End Sub


Function typeOf(x As Variant)
	Dim result As String
	result = TypeName(x)
	If result = &quot;Object&quot; Then
		result = _typeOf(x) &apos; DONT access fields in here!
	ElseIf IsArray(x) Then
		result = &quot;Array&quot;
	End If
	typeOf = result
End Function

Function _typeOf(o As Object)
	Dim result As String
	result = &quot;Object&quot;
	On Local Error Goto ErrorHandler
	result = result &amp; &quot;/&quot; &amp; o.tyname
ErrorHandler:
	_typeOf = result
End Function

Sub croak(msg As String)
	Dim provoke As Object
	If Not(testRun) Then
		MsgBox(msg)
	End If
	MsgBox(provoke.AnError)
End Sub

Function fst(x As Variant, y As Variant)
	fst = x
End Function

Function snd(x As Variant, y As Variant)
	snd = y
End Function

Function concat(a As String, b As String) As String
	concat = a &amp; b
End Function


Function toString(ByVal v As Variant) As String
	Dim result As String
	Dim tp As String
	tp = typeOf(v)
	Select Case tp
		Case &quot;String&quot;
			Dim t As String
			t = v &amp; &quot;&quot;
			t = Join(Split(t, chr(13)), &quot;\n&quot;)
			t = Join(Split(t, chr(9)), &quot;\t&quot;)
			result = &quot;&apos;&quot; &amp; t &amp; &quot;&apos;&quot;
		Case &quot;Empty&quot;
			result = tp
		Case &quot;Object&quot;
			If IsNull(v) Then
				result = &quot;Nothing&quot;
			Else
				result = tp &amp; &quot;(...)&quot;
			End If
		Case &quot;Array&quot;
			result = Array_toString(v)
		Case Else
			If IsObject(v) Then
				Dim tyName As String, toStrFn As String
				tyName = Mid(tp, Len(&quot;Object&quot;) + 2)
				toStrFnName = tyName &amp; &quot;_toString&quot;
				&apos;We&apos;ve got an Object with .tyName, so we insist on its _toString to exist
				&apos;Note: We test ourselves since applyF/croak call toString again...
				If Not(existsF(toStrFnName)) Then
					croak(&quot;toString: unknown fn &apos;&quot; &amp; toStrFnName &amp; &quot;&apos;&quot;)
				Else
					result = applyF(toStrFnName, Array(v))
				End If
			Else
				result = v &amp; &quot;&quot;
			End If
	End Select
	toString = result
End Function

Function readHex(arg As Variant) As Integer
	Dim result As Integer, t As String
	t = typeOf(arg)
	Select Case t
		Case &quot;Array&quot;
			result = readHex(Join(arg))
		Case &quot;String&quot;
			Dim l As Integer
			l = Len(arg)
			If l = 0 Then
				croak(&quot;readHex: got empty String&quot;)
			Else
				Dim digits As String, d As Integer, x As Integer
				digits = arg
				result = 0
				For i = 1 To Len(digits)
					d = Asc(Mid(digits, i, 1))
					If (d &gt;= Asc(&quot;0&quot;)) And (d &lt;= Asc(&quot;9&quot;)) Then
						x = d - Asc(&quot;0&quot;)
					ElseIf (d &gt;= Asc(&quot;A&quot;)) And (d &lt;= Asc(&quot;F&quot;)) Then
						x = d - Asc(&quot;A&quot;) + 10
					ElseIf (d &gt;= Asc(&quot;a&quot;)) And (d &lt;= Asc(&quot;f&quot;)) Then
						x = d - Asc(&quot;a&quot;) + 10
					Else
						croak(&quot;readHex: invalid hex digit &apos;&quot; &amp; chr(d) &amp; &quot;&apos; in &quot; &amp; toString(arg))
					End If
					result = (result * 16) + x
				Next i
			End If
		Case Else
			croak(&quot;readHex: expected Array or String - got &quot; &amp; t &amp; &quot;:&quot; &amp; chr(13) &amp; toString(arg))
	End Select
	readHex = result
End Function

&apos;= tests ============================================================

Function test_Common()
	test_typeOf()
	test_toString()
	test_fst()
	test_snd()
	test_readHex()
End Function

Function test_typeOf()
	assertEqual(typeOf(0), &quot;Integer&quot;).x
	assertEqual(typeOf(1), &quot;Integer&quot;).x
	assertEqual(typeOf(-42), &quot;Integer&quot;).x
	
	assertEqual(typeOf(&quot;&quot;), &quot;String&quot;).x
	assertEqual(typeOf(&quot;1&quot;), &quot;String&quot;).x
	
	assertEqual(typeOf(3.14), &quot;Double&quot;).x

	assertEqual(typeOf(Array()), &quot;Array&quot;).x

	assertEqual(typeOf(Empty), &quot;Empty&quot;).x
	assertEqual(typeOf(Nothing), &quot;Object&quot;).x

	Dim t1 As New TTest_NoTyName
	assertEqual(typeOf(t1), &quot;Object&quot;).x

	Dim t2 As New TTest_TyName
	t2.tyname = &quot;foobar&quot;
	assertEqual(typeOf(t2), &quot;Object/foobar&quot;).x
End Function

Function test_toString()
	assertEqual(toString(&quot;&quot;),                  &quot;&apos;&apos;&quot;).x
	assertEqual(toString(&quot; &quot;),                 &quot;&apos; &apos;&quot;).x
	assertEqual(toString(&quot;abc&quot;),               &quot;&apos;abc&apos;&quot;).x
	assertEqual(toString(0),                   &quot;0&quot;).x
	assertEqual(toString(&quot;0&quot;),                 &quot;&apos;0&apos;&quot;).x
	assertEqual(toString(1),                   &quot;1&quot;).x
	assertEqual(toString(&quot;1&quot;),                 &quot;&apos;1&apos;&quot;).x
	assertEqual(toString(&quot; 1&quot;),                &quot;&apos; 1&apos;&quot;).x
	assertEqual(toString(&quot;01&quot;),                &quot;&apos;01&apos;&quot;).x
	assertEqual(toString(01),                  &quot;1&quot;).x
	assertEqual(toString(chr(13)),             &quot;&apos;\n&apos;&quot;).x
	assertEqual(toString(chr( 9)),             &quot;&apos;\t&apos;&quot;).x
	assertEqual(toString(chr( 9) &amp; &quot;x&quot;),       &quot;&apos;\tx&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr( 9)),       &quot;&apos;x\t&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr(13)),       &quot;&apos;x\n&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr( 9) &amp; &quot;y&quot;), &quot;&apos;x\ty&apos;&quot;).x
	assertEqual(toString(&quot;x&quot; &amp; chr(13) &amp; &quot;y&quot;), &quot;&apos;x\ny&apos;&quot;).x
	assertEqual(toString(chr(9) &amp; chr(13) &amp; &quot;y&quot;), &quot;&apos;\t\ny&apos;&quot;).x

	assertEqual(toString(Nothing), &quot;Nothing&quot;).x
	assertEqual(toString(Empty), &quot;Empty&quot;).x

	Dim t1 As New TTest_NoTyName
	assertEqual(toString(t1), &quot;Object(...)&quot;).x

	Dim t2 As New TTest_TyName
	t2.tyname = &quot;foobar&quot;
	assertThrows(&quot;toString&quot;, Array(t2)).x
End Function

Function test_fst()
	assertEqual(arityF(&quot;fst&quot;), 2).x

	assertThrows(&quot;fst&quot;, Array()).x
	assertThrows(&quot;fst&quot;, Array(1)).x

	assertEqual(fst(1, 2), 1).x
	assertEqual(fst(2, 1), 2).x
	assertEqual(fst(&quot;a&quot;, &quot;b&quot;), &quot;a&quot;).x
	assertEqual(fst(&quot;b&quot;, &quot;a&quot;), &quot;b&quot;).x
End Function

Function test_snd()
	assertEqual(arityF(&quot;snd&quot;), 2).x

	assertThrows(&quot;snd&quot;, Array()).x
	assertThrows(&quot;snd&quot;, Array(1)).x

	assertEqual(snd(1, 2), 2).x
	assertEqual(snd(2, 1), 1).x
	assertEqual(snd(&quot;a&quot;, &quot;b&quot;), &quot;b&quot;).x
	assertEqual(snd(&quot;b&quot;, &quot;a&quot;), &quot;a&quot;).x
End Function

Function test_readHex()
	assertEqual(arityF(&quot;readHex&quot;), 1).x
	
	assertEqual(readHex( &quot;0&quot;),    0).x
	assertEqual(readHex( &quot;1&quot;),    1).x
	assertEqual(readHex( &quot;2&quot;),    2).x
	assertEqual(readHex( &quot;3&quot;),    3).x
	assertEqual(readHex( &quot;4&quot;),    4).x
	assertEqual(readHex( &quot;5&quot;),    5).x
	assertEqual(readHex( &quot;6&quot;),    6).x
	assertEqual(readHex( &quot;7&quot;),    7).x
	assertEqual(readHex( &quot;8&quot;),    8).x
	assertEqual(readHex( &quot;9&quot;),    9).x
	assertEqual(readHex( &quot;a&quot;),   10).x
	assertEqual(readHex( &quot;A&quot;),   10).x
	assertEqual(readHex( &quot;b&quot;),   11).x
	assertEqual(readHex( &quot;B&quot;),   11).x
	assertEqual(readHex( &quot;c&quot;),   12).x
	assertEqual(readHex( &quot;C&quot;),   12).x
	assertEqual(readHex( &quot;d&quot;),   13).x
	assertEqual(readHex( &quot;D&quot;),   13).x
	assertEqual(readHex( &quot;e&quot;),   14).x
	assertEqual(readHex( &quot;E&quot;),   14).x
	assertEqual(readHex( &quot;f&quot;),   15).x
	assertEqual(readHex( &quot;F&quot;),   15).x

	assertEqual(readHex( &quot;1F&quot;),  31).x
	assertEqual(readHex( &quot;1f&quot;),  31).x
	assertEqual(readHex( &quot;ff&quot;), 255).x
	assertEqual(readHex( &quot;Ff&quot;), 255).x

	assertThrows(&quot;readHex&quot;, Array(3)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot; &quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;g&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;G&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;z&quot;)).x
	assertThrows(&quot;readHex&quot;, Array(&quot;Z&quot;)).x

	assertThrows(&quot;readHex&quot;, Array(&quot;014Z&quot;)).x
End Function

</script:module>