<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="M00_Test" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Type TTestPass
	n As Integer
	x As String
End Type

Type TTestFail
	n As Integer
	expected As Variant
	actual As Variant
	msg As String
End Type

Global testLevel As Integer

Sub Main
	test_Test()
End Sub

Function _argsStr(fName As String, args As Array)
On Local Error Goto JustSomething
	If fName = &quot;toString&quot; Then	&apos; we cannot use toString if we were just called from there
		Goto JustSomething
	End If
	_argsStr = toString(args)
	Exit Function
JustSomething:
	_argsStr = &quot; some &quot; &amp; typeOf(args)
End Function

Function assertThrows(fName As String, args As Array, Optional errNo As Integer)
	Dim result As Object
	Dim fResult As Variant
On Local Error Goto Boom
	testLevel = testLevel + 1
	fResult = applyF(fName, args)
	testLevel = testLevel - 1
	result = New TTestFail
	result.expected = IIf(IsMissing(errNo), &quot;an error&quot;, &quot;error &quot; &amp; errNo)
	result.actual = &quot;no error&quot;
	result.msg = &quot;expected fn &apos;&quot; &amp; fName &amp; &quot;&apos; to yield an error on args&quot; &amp; chr(13)_
		&amp; _argsStr(fName, args) &amp; chr(13)_
		&amp; &quot;returned &quot; &amp; _argsStr(fName, fResult)
	MsgBox(&quot;FAIL: &quot; &amp; result.msg)
	assertThrows = result
	Exit Function
Boom:
	testLevel = testLevel - 1
	If Not(IsMissing(errNo)) Then
		If (errNo &lt;&gt; Err) Then
			result = New TTestFail
			result.expected = &quot;error &quot; &amp; errNo &amp; &quot;: &quot; &amp; toString(Error(errNo))
			result.actual   = &quot;error &quot; &amp; Err &amp; &quot;: &quot; &amp; toString(Error$)
			result.msg = &quot;expected fn &apos;&quot; &amp; fName &amp; &quot;&apos; to yield&quot; _
				&amp; chr(13) &amp; &quot;       &quot; &amp; result.expected _
				&amp; chr(13) &amp; &quot; not &quot; &amp; result.actual _
				&amp; chr(13) &amp; &quot;on args:&quot; _
				&amp; chr(13) &amp; _argsStr(fName, args)
			MsgBox(&quot;FAIL: &quot; &amp; result.msg)
		Else
			result = New TTestPass
			result.x = Err &amp; &quot;: &quot; &amp; Error$
		End If
	Else
		result = New TTestPass
		result.x = Err &amp; &quot;: &quot; &amp; Error$
	End If
	assertThrows = result
End Function

Function assertEqual(actual As Variant, expected As Variant)
	Dim result As Object
	If Not(actual = expected) Then
		Set result = New TTestFail
		result.expected = expected
		result.actual = actual
		result.msg = &quot;expected &quot; &amp; toString(actual)_
			&amp; chr(13) &amp; &quot;     to equal &quot; &amp; toString(expected)
		MsgBox(&quot;FAIL: &quot; &amp; result.msg)
	Else
		Set result = New TTestPass
	End If
	assertEqual = result
End Function


Function i_will_throw0()
	Dim foo As Object
	i_will_throw0 = foo.provoke.an.error
End Function

Function test_Test()
	assertEqual(arityF(&quot;i_will_throw0&quot;), 0).x
	assertThrows(&quot;i_will_throw0&quot;, Array()).x
	assertThrows(&quot;i_will_throw0&quot;, Array(), 91).x
	assertThrows(&quot;i_will_throw0&quot;, Array(5)).x
End Function

</script:module>