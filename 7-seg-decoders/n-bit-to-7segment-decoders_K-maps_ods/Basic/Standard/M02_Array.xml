<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="M02_Array" script:language="StarBasic">REM  *****  BASIC  *****

Sub Main
	test_Array()
End Sub


Function getBounds(a As Array)
	Dim result As Variant, i As Integer, lo As Integer, hi As Integer
	result = nil
	i = 1
	On Local Error Goto ErrorHandler
	While True
		lo = LBound(a, i)
		hi = UBound(a, i)
		result = cons(List(lo, hi, hi - lo + 1), result)
		i = i + 1
	Wend
	ErrorHandler:
		getBounds = reverse(result)
End Function

Function getSizes(a As Array)
	getSizes = map(&quot;caddr&quot;, getBounds(a))

End Function

Function getDim(a As Array)
	getDim = length(getBounds(a))
End Function

Function Array_toString(v As Variant) As String
	Dim result As String
	result = &quot;Array(&quot;
	Dim i As Integer
	For i = LBound(v) To UBound(v)
		If i &gt; LBound(v) Then
			result = result &amp; &quot;, &quot;
		End If
		result = result &amp; toString(v(i))
	Next i
	result = result &amp; &quot;)&quot;
	Array_toString = result
End Function

&apos;= tests ============================================================

Function test_Array()
	test_getBounds()
	test_getSizes()
	test_getDim()
	test_Array_toString()
End Function

Function test_getBounds()
	Dim bs As Variant
	bs = getBounds(Array())
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[[0, -1, 0]]&quot;).x

	bs = getBounds(Array(1))
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[[0, 0, 1]]&quot;).x

	bs = getBounds(Array(1, 2, 3))
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[[0, 2, 3]]&quot;).x

	bs = getBounds(Array(1, Array(2, 3)))
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[[0, 1, 2]]&quot;).x

	bs = getBounds(DimArray(1, 2, 3))
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[[0, 1, 2], [0, 2, 3], [0, 3, 4]]&quot;).x

	Dim a(1 To 5, -7 To 2)
	bs = getBounds(a)
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[[1, 5, 5], [-7, 2, 10]]&quot;).x
End Function

Function test_getSizes()
	Dim bs As Variant
	bs = getSizes(Array())
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[0]&quot;).x

	bs = getSizes(Array(1, 2, 3))
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[3]&quot;).x

	bs = getSizes(Array(1, Array(2, 3)))
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[2]&quot;).x

	bs = getSizes(DimArray(1, 2, 3))
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[2, 3, 4]&quot;).x

	Dim a(1 To 5, -7 To 2)
	bs = getSizes(a)
	assertEqual(typeOf(bs), &quot;Object/TList&quot;).x
	assertEqual(toString(bs), &quot;[5, 10]&quot;).x
End Function


Function test_getDim()
	assertEqual(getDim(Array()), 1).x
	assertEqual(getDim(DimArray(1, 4)), 2).x
	assertEqual(getDim(DimArray(1, 5, 3)), 3).x
End Function

Function test_Array_toString()
	assertEqual(toString(Array()), &quot;Array()&quot;).x
	assertEqual(toString(Array(3, 2, &quot;one&quot;)), &quot;Array(3, 2, &apos;one&apos;)&quot;).x
	assertEqual(toString(Array(Array(1, 2, 3, 4), &quot;five&quot;)), &quot;Array(Array(1, 2, 3, 4), &apos;five&apos;)&quot;).x
End Function


</script:module>