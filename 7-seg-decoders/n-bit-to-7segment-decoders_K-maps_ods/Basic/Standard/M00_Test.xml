<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="M00_Test" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Type TTestPass
	n As Integer
	isFail As Boolean	
	x As String
End Type

Type TTestFail
	n As Integer
	isFail As Boolean	
	actual As Variant
	expected As Variant
	msg As String
End Type

Type TTest_Dummy
End Type

Global testLevel As Integer

Sub Main
	test_Test()
End Sub

Function _argsStr(fName As String, args As Array)
On Local Error Goto JustSomething
	If fName = &quot;toString&quot; Then	&apos; we cannot use toString if we were just called from there
		Goto JustSomething
	End If
	_argsStr = toString(args)
	Exit Function
JustSomething:
	_argsStr = &quot; some &quot; &amp; typeOf(args)
End Function

Function mkFail(actual As Variant, expected As Variant, msg As String)
	Dim result As Object
	Set result = new TTestFail
	result.isFail = True
	result.actual = actual
	result.expected = expected
	result.msg = msg
	If (testLevel = 0) Then
		MsgBox(&quot;FAIL: &quot; &amp; msg)
	End If
	mkFail = result
End Function

Function mkPass()
	Dim result As Object
	Set result = New TTestPass
	result.isFail = False
	mkPass = result
End Function

Function assertThrows(fName As String, args As Array, Optional errNo As Integer)
	Dim result As Object, a As String, x As String
	Dim fResult As Variant
	Dim k As Integer, n As Integer
	If Not(isArray(args)) Then
		croak(&quot;assertThrows: expected Array of args but got&quot; &amp; chr(13) &amp; toString(args))
	End If
	k = LBound(args)
	n = UBound(args) - k + 1
	Select Case fName
		Case &quot;assertEqual&quot;:	
		Case &quot;assertThrows&quot;
		Case &quot;i_will_throw0&quot;
		Case Else
			If Not(existsF(fName)) Then
				croak(&quot;assertThrows: unknown fn &quot; &amp; toString(fName))
			End If
	End Select
On Local Error Goto Boom
	testLevel = testLevel + 1
	Select Case fName
		Case &quot;assertEqual&quot;: 	fResult = assertEqual(args(k), args(k+1))
		Case &quot;assertThrows&quot;
			If n = 2 Then
				fResult = assertThrows(args(k), args(k+1))
			ElseIf n = 3 Then
				fResult = assertThrows(args(k), args(k+1), args(k+2))
			Else
				croak(&quot;assertThrows: expected Array of 2 or 3 args but got&quot; &amp; chr(13) &amp; toString(args))
			End If
		Case &quot;i_will_throw0&quot;:	fResult = i_will_throw0()
		Case Else
			fResult = applyF(fName, args)
	End Select
	testLevel = testLevel - 1
	a = &quot;no error&quot;
	x = IIf(IsMissing(errNo), &quot;an error&quot;, &quot;error &quot; &amp; errNo)
	Set result = mkFail(a, x, _
		&quot;expected fn &apos;&quot; &amp; fName &amp; &quot;&apos; to yield &quot; &amp; x &amp; &quot; on args&quot; _
			&amp; chr(13) &amp; _argsStr(fName, args) _
			&amp; chr(13) &amp; &quot;returned &quot; &amp; _argsStr(fName, fResult) _
	)
	assertThrows = result
	Exit Function
Boom:
	testLevel = testLevel - 1
	If Not(IsMissing(errNo)) And (errNo &lt;&gt; Err) Then
		a = &quot;error &quot; &amp; Err &amp; &quot;: &quot; &amp; toString(Error$)
		x = &quot;error &quot; &amp; errNo &amp; &quot;: &quot; &amp; toString(Error(errNo))
		Set result = mkFail(a, x, _
			&quot;expected fn &apos;&quot; &amp; fName &amp; &quot;&apos; to yield&quot; _
				&amp; chr(13) &amp; &quot;       &quot; &amp; x _
				&amp; chr(13) &amp; &quot; not &quot; &amp; a _
				&amp; chr(13) &amp; &quot;on args:&quot; _
				&amp; chr(13) &amp; _argsStr(fName, args) _
		)
	Else
		Set result = mkPass()
		result.x = Err &amp; &quot;: &quot; &amp; Error$
	End If
	assertThrows = result
End Function

Function assertEqual(actual As Variant, expected As Variant)
	Dim result As Object
	Dim ta As String, tx As String
	ta = typeOf(actual)
	tx = typeOf(expected)
	If (ta &lt;&gt; tx) Then
		Goto assertEqual_failed
	ElseIf (isObject(actual) And isObject(expected)) Then
		If (isNull(actual) = isNull(expected)) Then &apos; either both null or both not
			If (isNull(actual) And isNull(expected)) Then
				Goto assertEqual_passed
			Else
				croak(&quot;assertEqual: cannot compare non-null Objects - test custom equ fn instead&quot;)
			End If
		Else &apos; one null, the other not
			Goto assertEqual_failed
		End If
	ElseIf (actual = expected) Then
		Goto assertEqual_passed
	End If
assertEqual_failed:
	assertEqual = mkFail(actual, expected, _
			&quot;expected &quot; &amp; toString(actual) _
				&amp; chr(13) &amp; &quot;     to equal &quot; &amp; toString(expected) _
		)
	Exit Function
assertEqual_passed:
	assertEqual = mkPass()
	Exit Function
End Function

Function assertPasses(assertionName As String, args As Array)
	Dim result As Object, innerResult As Object
	Select Case assertionName
		Case &quot;assertEqual&quot;
			testLevel = testLevel + 1
			innerResult = assertEqual(args(0), args(1))
			testLevel = testLevel - 1
			If innerResult.isFail Then
				Dim a As Object, x As String
				a = innerResult
				x = &quot;pass&quot;
				Set result = mkFail(a, x, _
					&quot;expected &quot; &amp; assertionName &amp; &quot; to pass on args &quot; _
						&amp; chr(13) &amp; &quot;  &quot; &amp; _argsStr(assertionName, args) _
						&amp; chr(13) &amp; &quot;but it failed:&quot; _
						&amp; chr(13) &amp; a.msg _
				)
			Else
				Set result = mkPass()
			End If
		Case Else
			croak(&quot;assertPasses: unknown assertion &apos;&quot; &amp; assertionName &amp; &quot;&apos;&quot;)
	End Select
	assertPasses = result
End Function

Function assertFails(assertionName As String, args As Array)
	Dim result As Object, innerResult As Object
	Select Case assertionName
		Case &quot;assertEqual&quot;
			testLevel = testLevel + 1
			innerResult = assertEqual(args(0), args(1))
			testLevel = testLevel - 1
			If Not(innerResult.isFail) Then
				Dim a As Object, x As String
				a = innerResult
				x = &quot;fail&quot;
				Set result = mkFail(a, x, _
					&quot;expected &quot; &amp; assertionName &amp; &quot; to fail on args &quot; _
						&amp; chr(13) &amp; &quot;  &quot; &amp; _argsStr(assertionName, args) _
						&amp; chr(13) &amp; &quot;but it passed.&quot; _
				)
			Else
				Set result = mkPass()
			End If
		Case Else
			croak(&quot;assertFails: unknown assertion &apos;&quot; &amp; assertionName &amp; &quot;&apos;&quot;)
	End Select
	assertFails = result
End Function

Function i_will_throw0()
	Dim foo As Object
	i_will_throw0 = foo.provoke.an.error
End Function

Function test_Test()
	test_assertEqual()
	test_assertThrows()
End Function

Function test_assertEqual()
	Dim aName As String
	aName = &quot;assertEqual&quot;
	
	assertEqual(False, False).x
	assertPasses(aName, Array(False, False)).x

	assertEqual(True, True).x
	assertPasses(aName, Array(True, True)).x

	assertEqual(0, 0).x
	assertPasses(aName, Array(0, 0)).x

	assertEqual(&quot;0&quot;, &quot;0&quot;).x
	assertPasses(aName, Array(&quot;0&quot;, &quot;0&quot;)).x

	assertEqual(&quot;a&quot;, &quot;a&quot;).x
	assertPasses(aName, Array(&quot;a&quot;, &quot;a&quot;)).x

	assertEqual(Nothing, Nothing).x
	assertPasses(aName, Array(Nothing, Nothing)).x

	assertEqual(Empty, Empty).x
	assertPasses(aName, Array(Empty, Empty)).x

	assertFails(aName, Array(False, True)).x
	assertFails(aName, Array(True, False)).x
	
	assertFails(aName, Array(False, Empty)).x
	assertFails(aName, Array(Empty, False)).x

	assertFails(aName, Array(True, Empty)).x
	assertFails(aName, Array(Empty, True)).x

	assertFails(aName, Array(False, Nothing)).x
	assertFails(aName, Array(Nothing, False)).x

	assertFails(aName, Array(True, Nothing)).x
	assertFails(aName, Array(Nothing, True)).x

	assertFails(aName, Array(False, &quot;&quot;)).x
	assertFails(aName, Array(&quot;&quot;, False)).x

	assertFails(aName, Array(True, &quot;&quot;)).x
	assertFails(aName, Array(&quot;&quot;, True)).x

	assertFails(aName, Array(False, 0)).x
	assertFails(aName, Array(0, False)).x

	assertFails(aName, Array(True, 0)).x
	assertFails(aName, Array(0, True)).x

	assertFails(aName, Array(False, 1)).x
	assertFails(aName, Array(1, False)).x

	assertFails(aName, Array(True, 1)).x
	assertFails(aName, Array(1, True)).x

	assertFails(aName, Array(False, &quot;&quot;)).x
	assertFails(aName, Array(&quot;&quot;, False)).x

	assertFails(aName, Array(True, &quot;&quot;)).x
	assertFails(aName, Array(&quot;&quot;, True)).x

	assertFails(aName, Array(False, &quot;a&quot;)).x
	assertFails(aName, Array(&quot;a&quot;, False)).x

	assertFails(aName, Array(True, &quot;a&quot;)).x
	assertFails(aName, Array(&quot;a&quot;, True)).x


	assertFails(aName, Array(Empty, &quot;&quot;)).x
	assertFails(aName, Array(&quot;&quot;, Empty)).x

	assertFails(aName, Array(Nothing, &quot;&quot;)).x
	assertFails(aName, Array(&quot;&quot;, Nothing)).x
	
	assertFails(aName, Array(Empty, &quot;a&quot;)).x
	assertFails(aName, Array(&quot;a&quot;, Empty)).x

	assertFails(aName, Array(Nothing, &quot;a&quot;)).x
	assertFails(aName, Array(&quot;a&quot;, Nothing)).x

	Dim dummy As Object
	assertFails(aName, Array(Empty, dummy)).x
	assertFails(aName, Array(dummy, Empty)).x

	assertPasses(aName, Array(Nothing, dummy)).x
	assertPasses(aName, Array(dummy, Nothing)).x

	Set dummy = New TTest_Dummy
	assertFails(aName, Array(Empty, dummy)).x
	assertFails(aName, Array(dummy, Empty)).x

	assertFails(aName, Array(Nothing, dummy)).x
	assertFails(aName, Array(dummy, Nothing)).x

	assertThrows(aName, Array(dummy, dummy)).x


	assertFails(aName, Array(0, 1)).x
	assertFails(aName, Array(0, &quot;1&quot;)).x
	assertFails(aName, Array(0, False)).x
	assertFails(aName, Array(0, True)).x
	
	assertFails(aName, Array(&quot;0&quot;, &quot;1&quot;)).x
	assertFails(aName, Array(&quot;a&quot;, &quot;b&quot;)).x
	assertFails(aName, Array(&quot;a&quot;, &quot;b&quot;)).x
	
	assertFails(aName, Array(Nothing, Empty)).x
	assertFails(aName, Array(Empty, Nothing)).x
	
	assertFails(aName, Array(Empty, 0)).x
	assertFails(aName, Array(0, Empty)).x
	
	assertFails(aName, Array(Empty, &quot;a&quot;)).x
	assertFails(aName, Array(&quot;a&quot;, Empty)).x

	assertFails(aName, Array(Nothing, 0)).x
	assertFails(aName, Array(0, Nothing)).x

	assertFails(aName, Array(&quot;a&quot;, Nothing)).x
	
End Function

Function test_assertThrows()
	assertThrows(&quot;i_will_throw0&quot;, Array()).x
	assertThrows(&quot;i_will_throw0&quot;, Array(), 91).x
	assertThrows(&quot;i_will_throw0&quot;, Array(5)).x
	
	&apos; inner assertThrows throws because *IT* gets no args (so the outer passes)
	assertThrows(&quot;assertThrows&quot;, Array()).x
	
	&apos; inner assertThrows throws because *IT* gets no valid arg array to pass on (so the outer passes)
	assertThrows(&quot;assertThrows&quot;, Array(&quot;assertEqual&quot;, 2, 2)).x

&apos;	assertFails(&quot;assertThrows&quot;, Array(&quot;assertEqual&quot;, Array(2, 2))).x
&apos;	assertFails(&quot;assertThrows&quot;, Array(&quot;assertEqual&quot;, Array(2, 3))).x

&apos;	assertPasses(&quot;assertThrows&quot;, Array(&quot;i_will_throw0&quot;, Nothing)).x
End Function

</script:module>